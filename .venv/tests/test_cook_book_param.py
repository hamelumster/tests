import pytest
from cookbook import solve

@pytest.mark.parametrize("cook_book, person, expected", [
    (
        [
            ['Салат', [
                ['картофель', 100, 'гр.'],
                ['морковь', 50, 'гр.'],
                ['огурцы', 50, 'гр.'],
                ['горошек', 30, 'гр.'],
                ['майонез', 70, 'мл.'],
            ]],
            ['Пицца', [
                ['сыр', 50, 'гр.'],
                ['томаты', 50, 'гр.'],
                ['тесто', 100, 'гр.'],
                ['бекон', 30, 'гр.'],
                ['колбаса', 30, 'гр.'],
                ['грибы', 20, 'гр.'],
            ]],
            ['Фруктовый десерт', [
                ['хурма', 60, 'гр.'],
                ['киви', 60, 'гр.'],
                ['творог', 60, 'гр.'],
                ['сахар', 10, 'гр.'],
                ['мед', 50, 'мл.'],
            ]]
        ], 5, [
            'Салат: картофель 500 гр., морковь 250 гр., огурцы 250 гр., горошек 150 гр., майонез 350 мл.',
            'Пицца: сыр 250 гр., томаты 250 гр., тесто 500 гр., бекон 150 гр., колбаса 150 гр., грибы 100 гр.',
            'Фруктовый десерт: хурма 300 гр., киви 300 гр., творог 300 гр., сахар 50 гр., мед 250 мл.'
        ]
    ),
    (
        [
            ['Салат', [
                ['картофель', 100, 'гр.'],
                ['морковь', 50, 'гр.'],
                ['огурцы', 50, 'гр.'],
                ['горошек', 30, 'гр.'],
                ['майонез', 70, 'мл.'],
            ]],
        ], 1, [
            'Салат: картофель 100 гр., морковь 50 гр., огурцы 50 гр., горошек 30 гр., майонез 70 мл.'
        ]
    ),
    (
        [
            ['Пицца', [
                ['сыр', 50, 'гр.'],
                ['томаты', 50, 'гр.'],
                ['тесто', 100, 'гр.'],
                ['бекон', 30, 'гр.'],
                ['колбаса', 30, 'гр.'],
                ['грибы', 20, 'гр.'],
            ]],
        ], 3, [
            'Пицца: сыр 150 гр., томаты 150 гр., тесто 300 гр., бекон 90 гр., колбаса 90 гр., грибы 60 гр.'
        ]
    )
])
def test_solve(cook_book, person, expected):
    result = solve(cook_book, person)
    assert result == expected
